name: Windows 98 Style Downloader

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL to download content from'
        required: true
        default: 'https://www.tiktok.com/@qawwli.lovers1'
      download_type:
        description: 'Type of download'
        required: true
        default: 'tiktok'
        type: choice
        options:
        - tiktok
        - youtube
        - general

jobs:
  windows98-downloader:
    runs-on: windows-latest  # Using Windows runner for authentic experience
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yt-dlp requests beautifulsoup4 flask
        
    - name: Create Windows 98 style downloader
      run: |
        # Create the main downloader script with Windows 98 UI
        @"
        import os
        import sys
        import time
        import threading
        from flask import Flask, render_template_string, request, jsonify
        import yt_dlp
        import requests
        import json

        app = Flask(__name__)

        # Windows 98 Style HTML Template
        HTML_TEMPLATE = '''
        <!DOCTYPE html>
        <html>
        <head>
            <title>Windows 98 Download Manager</title>
            <style>
                body {
                    font-family: 'MS Sans Serif', Arial, sans-serif;
                    background-color: #008080;
                    margin: 0;
                    padding: 20px;
                    color: #000;
                }
                .window {
                    background-color: #c0c0c0;
                    border: 2px outset;
                    padding: 2px;
                    margin: 10px auto;
                    width: 90%;
                    max-width: 800px;
                }
                .title-bar {
                    background: linear-gradient(90deg, #000080, #1084d0);
                    color: white;
                    padding: 2px 4px;
                    font-weight: bold;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                .content {
                    padding: 15px;
                    background-color: #c0c0c0;
                }
                input[type="text"] {
                    width: 70%;
                    padding: 4px;
                    border: 2px inset;
                    background: white;
                    font-family: 'MS Sans Serif';
                }
                button {
                    background-color: #c0c0c0;
                    border: 2px outset;
                    padding: 4px 12px;
                    font-family: 'MS Sans Serif';
                    cursor: pointer;
                }
                button:active {
                    border: 2px inset;
                }
                .progress-container {
                    border: 2px inset;
                    background: white;
                    height: 20px;
                    margin: 10px 0;
                }
                .progress-bar {
                    background: linear-gradient(90deg, #000080, #1084d0);
                    height: 100%;
                    width: 0%;
                    transition: width 0.3s;
                }
                .file-list {
                    border: 2px inset;
                    background: white;
                    height: 200px;
                    overflow-y: auto;
                    padding: 5px;
                    font-family: 'Courier New', monospace;
                }
                .status-bar {
                    background-color: #c0c0c0;
                    border: 2px inset;
                    padding: 2px 4px;
                    margin-top: 5px;
                    font-size: 12px;
                }
            </style>
        </head>
        <body>
            <div class="window">
                <div class="title-bar">
                    <span>üì• Windows 98 Download Manager</span>
                    <span style="font-size: 12px;">‚ï≥ ‚îÄ ‚ñ°</span>
                </div>
                <div class="content">
                    <h3>üñºÔ∏è Enter URL to Download:</h3>
                    <input type="text" id="urlInput" placeholder="https://www.tiktok.com/@username" value="${{ github.event.inputs.target_url }}">
                    <button onclick="startDownload()">Start Download</button>
                    
                    <div class="progress-container">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                    
                    <div class="status-bar" id="statusBar">Ready to download...</div>
                    
                    <h4>üìÅ Download Progress:</h4>
                    <div class="file-list" id="fileList"></div>
                    
                    <div style="margin-top: 10px;">
                        <button onclick="checkProgress()">Refresh Status</button>
                        <button onclick="clearLog()">Clear Log</button>
                    </div>
                </div>
            </div>

            <script>
                let downloadInterval;
                
                function startDownload() {
                    const url = document.getElementById('urlInput').value;
                    if (!url) {
                        alert('Please enter a URL!');
                        return;
                    }
                    
                    document.getElementById('statusBar').textContent = 'Starting download...';
                    document.getElementById('progressBar').style.width = '5%';
                    
                    fetch('/start-download', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({url: url})
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById('statusBar').textContent = 'Download started successfully!';
                            downloadInterval = setInterval(checkProgress, 2000);
                        }
                    });
                }
                
                function checkProgress() {
                    fetch('/progress')
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('progressBar').style.width = data.progress + '%';
                            document.getElementById('statusBar').textContent = data.status;
                            document.getElementById('fileList').innerHTML = data.files.map(file => 
                                `[${file.time}] ${file.name}<br>`
                            ).join('');
                            
                            if (data.progress >= 100) {
                                clearInterval(downloadInterval);
                                document.getElementById('statusBar').textContent = 'Download completed!';
                            }
                        });
                }
                
                function clearLog() {
                    document.getElementById('fileList').innerHTML = '';
                }
            </script>
        </body>
        </html>
        '''

        download_status = {
            'progress': 0,
            'status': 'Ready',
            'files': []
        }

        def download_videos(url):
            try:
                download_status['status'] = 'Initializing download...'
                download_status['progress'] = 10
                
                # Create download directory
                os.makedirs('downloads', exist_ok=True)
                
                ydl_opts = {
                    'outtmpl': 'downloads/%(title).100s.%(ext)s',
                    'format': 'best[ext=mp4]/best',
                    'writethumbnail': True,
                    'embedmetadata': True,
                    'ignoreerrors': True,
                    'progress_hooks': [progress_hook],
                }
                
                download_status['status'] = 'Starting download process...'
                download_status['progress'] = 20
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([url])
                
                download_status['progress'] = 100
                download_status['status'] = 'Download completed successfully!'
                
            except Exception as e:
                download_status['status'] = f'Error: {str(e)}'
                download_status['progress'] = 0

        def progress_hook(d):
            if d['status'] == 'downloading':
                filename = os.path.basename(d['filename'])
                if '_percent_str' in d:
                    percent = d['_percent_str'].strip()
                    download_status['status'] = f'Downloading: {percent}'
                    try:
                        download_status['progress'] = min(95, int(float(percent.replace('%', ''))))
                    except:
                        pass
                
                download_status['files'].append({
                    'time': time.strftime('%H:%M:%S'),
                    'name': f'{filename} - {d.get("_percent_str", "0%")}'
                })
                
                # Keep only last 20 files in log
                if len(download_status['files']) > 20:
                    download_status['files'] = download_status['files'][-20:]

        @app.route('/')
        def index():
            return render_template_string(HTML_TEMPLATE)

        @app.route('/start-download', methods=['POST'])
        def start_download():
            data = request.json
            url = data.get('url', '')
            
            # Start download in background thread
            thread = threading.Thread(target=download_videos, args=(url,))
            thread.daemon = True
            thread.start()
            
            return jsonify({'success': True, 'message': 'Download started'})

        @app.route('/progress')
        def get_progress():
            return jsonify(download_status)

        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=8080, debug=False)
        "@ > windows98_downloader.py

    - name: Create batch file for Windows 98 style
      run: |
        @"
        @echo off
        echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        echo ‚ïë    WINDOWS 98 DOWNLOAD MANAGER      ‚ïë
        echo ‚ïë          GitHub Actions Edition     ‚ïë
        echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        echo.
        echo Initializing download system...
        echo Target: ${{ github.event.inputs.target_url }}
        echo.
        python windows98_downloader.py
        "@ > start_downloader.bat

    - name: Download content with progress tracking
      run: |
        # Create a simple progress tracking script
        python -c "
        import os
        import time
        import yt_dlp
        from datetime import datetime
        
        class ProgressLogger:
            def __init__(self):
                self.downloaded_files = []
                
            def progress_hook(self, d):
                if d['status'] == 'downloading':
                    percent = d.get('_percent_str', '0%')
                    speed = d.get('_speed_str', 'N/A')
                    eta = d.get('_eta_str', 'N/A')
                    
                    print(f'[{datetime.now().strftime(\"%H:%M:%S\")}] üì• {percent} | Speed: {speed} | ETA: {eta}')
                    
                elif d['status'] == 'finished':
                    filename = os.path.basename(d['filename'])
                    self.downloaded_files.append(filename)
                    print(f'[{datetime.now().strftime(\"%H:%M:%S\")}] ‚úÖ Completed: {filename}')
        
        logger = ProgressLogger()
        
        ydl_opts = {
            'outtmpl': 'downloads/%(uploader)s/%(title).100s.%(ext)s',
            'format': 'best[ext=mp4]/best',
            'writethumbnail': True,
            'embedmetadata': True,
            'ignoreerrors': True,
            'progress_hooks': [logger.progress_hook],
        }
        
        print('üöÄ Starting download process...')
        print('üîó URL: ${{ github.event.inputs.target_url }}')
        print('‚è∞ Started at:', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        print('='*50)
        
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download(['${{ github.event.inputs.target_url }}'])
                
            print('='*50)
            print('üéâ Download completed successfully!')
            print(f'üìÅ Files downloaded: {len(logger.downloaded_files)}')
            
        except Exception as e:
            print(f'‚ùå Error: {e}')
        "

    - name: Create download summary
      run: |
        # Count downloaded files and create summary
        $files = (Get-ChildItem -Path "downloads" -Recurse -File).Count
        $totalSize = [math]::Round((Get-ChildItem -Path "downloads" -Recurse -File | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
        
        @"
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë         DOWNLOAD SUMMARY             ‚ïë
        ‚ïë        Windows 98 Style              ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        
        üìä Statistics:
        üìÅ Files Downloaded: $files
        üíæ Total Size: $totalSize MB
        üîó Source URL: ${{ github.event.inputs.target_url }}
        ‚è∞ Completed at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        
        üìÇ Downloaded Content:
        $(Get-ChildItem -Path "downloads" -Recurse -File | ForEach-Object { "   üìÑ $($_.Name)" })
        
        ‚úÖ Process completed successfully!
        "@ > download_summary.txt
        
        Get-Content download_summary.txt

    - name: Upload downloaded content
      uses: actions/upload-artifact@v4
      with:
        name: windows98-downloads
        path: |
          downloads/
          download_summary.txt
          windows98_downloader.py
        retention-days: 30

    - name: Create Windows 98 style report
      run: |
        @"
        ========================================
        WINDOWS 98 DOWNLOAD MANAGER - FINAL REPORT
        ========================================
        Status: COMPLETED
        URL: ${{ github.event.inputs.target_url }}
        Runner: Windows Server
        Time: $(Get-Date)
        Artifact: windows98-downloads
        ========================================
        "@ > windows98_report.txt
