name: Windows 98 TikTok Download Manager

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'TikTok Profile URL'
        required: true
        default: 'https://www.tiktok.com/@qawwli.lovers1'
      download_type:
        description: 'Download type'
        required: true
        default: 'tiktok'
        type: choice
        options:
        - tiktok
        - youtube
        - general

jobs:
  windows98-downloader:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg python3-pip curl pv

    - name: Install Python packages
      run: |
        pip install yt-dlp requests tqdm

    - name: Create Windows 98 style downloader script
      run: |
        cat > win98_downloader.py << 'EOF'
        import os
        import sys
        import time
        import yt_dlp
        from datetime import datetime
        import json
        from tqdm import tqdm
        import threading

        class Windows98Downloader:
            def __init__(self):
                self.downloaded_files = 0
                self.total_files = 0
                self.current_file = ""
                self.progress = 0
                self.speed = "0 KB/s"
                self.eta = "--:--"
                self.is_downloading = False
                self.logs = []
                
            def print_header(self):
                print("╔══════════════════════════════════════════════╗")
                print("║          WINDOWS 98 DOWNLOAD MANAGER        ║")
                print("║           TikTok Video Downloader           ║")
                print("╚══════════════════════════════════════════════╝")
                print()
                
            def print_status_bar(self, width=50):
                filled = int(width * self.progress / 100)
                empty = width - filled
                bar = "█" * filled + "░" * empty
                print(f"┌─ Progress ─────────────────────────────────────┐")
                print(f"│ [{bar}] {self.progress:3d}% │")
                print(f"├─ Status ───────────────────────────────────────┤")
                print(f"│ {self.current_file:<44} │")
                print(f"├─ Statistics ──────────────────────────────────┤")
                print(f"│ Files: {self.downloaded_files:3d} │ Speed: {self.speed:>10} │ ETA: {self.eta:>8} │")
                print(f"└────────────────────────────────────────────────┘")
                
            def add_log(self, message, level="INFO"):
                timestamp = datetime.now().strftime("%H:%M:%S")
                log_entry = f"[{timestamp}] [{level}] {message}"
                self.logs.append(log_entry)
                print(f"📋 {log_entry}")
                
            def clear_screen(self):
                os.system('clear')
                
            def progress_hook(self, d):
                if d['status'] == 'downloading':
                    self.current_file = os.path.basename(d.get('filename', 'unknown'))
                    percent = d.get('_percent_str', '0%').strip()
                    self.speed = d.get('_speed_str', '0 KB/s')
                    self.eta = d.get('_eta_str', '--:--')
                    
                    try:
                        self.progress = min(95, int(float(percent.replace('%', ''))))
                    except:
                        pass
                    
                    self.clear_screen()
                    self.print_header()
                    self.print_status_bar()
                    self.print_recent_logs()
                    
                elif d['status'] == 'finished':
                    self.downloaded_files += 1
                    self.current_file = f"Completed: {os.path.basename(d.get('filename', 'unknown'))}"
                    self.add_log(f"Downloaded: {self.current_file}", "SUCCESS")
                    
            def print_recent_logs(self, count=5):
                print()
                print("┌─ Recent Activity ──────────────────────────────┐")
                for log in self.logs[-count:]:
                    if "SUCCESS" in log:
                        print(f"│ ✅ {log[-45:]:<45} │")
                    elif "ERROR" in log:
                        print(f"│ ❌ {log[-45:]:<45} │")
                    else:
                        print(f"│ 📋 {log[-45:]:<45} │")
                print("└────────────────────────────────────────────────┘")
                
            def download_profile(self, url):
                self.is_downloading = True
                self.print_header()
                self.add_log(f"Starting download from: {url}")
                
                # Create download directory
                os.makedirs('qawwali-videos', exist_ok=True)
                
                # yt-dlp configuration
                ydl_opts = {
                    'outtmpl': 'qawwali-videos/%(uploader)s/%(upload_date)s_%(title).100s.%(ext)s',
                    'format': 'best[ext=mp4]/best',
                    'writethumbnail': True,
                    'embedmetadata': True,
                    'ignoreerrors': True,
                    'sleep_interval': 1,
                    'max_sleep_interval': 5,
                    'progress_hooks': [self.progress_hook],
                }
                
                try:
                    self.progress = 10
                    self.current_file = "Initializing download..."
                    self.add_log("Download process started")
                    
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        ydl.download([url])
                    
                    self.progress = 100
                    self.current_file = "Download completed successfully!"
                    self.add_log("All downloads completed!", "SUCCESS")
                    
                except Exception as e:
                    self.add_log(f"Download error: {str(e)}", "ERROR")
                    self.current_file = f"Error: {str(e)}"
                    
                finally:
                    self.is_downloading = False
                    self.clear_screen()
                    self.print_header()
                    self.print_status_bar()
                    self.print_recent_logs(10)
                    
            def print_summary(self):
                print()
                print("╔══════════════════════════════════════════════╗")
                print("║               DOWNLOAD SUMMARY               ║")
                print("╚══════════════════════════════════════════════╝")
                print()
                print(f"📊 Total files downloaded: {self.downloaded_files}")
                print(f"🕒 Completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"📁 Output directory: qawwali-videos/")
                print()

        if __name__ == '__main__':
            downloader = Windows98Downloader()
            url = sys.argv[1] if len(sys.argv) > 1 else "https://www.tiktok.com/@qawwli.lovers1"
            downloader.download_profile(url)
            downloader.print_summary()
        EOF

    - name: Create ASCII progress monitor
      run: |
        cat > progress_monitor.sh << 'EOF'
        #!/bin/bash
        echo "╔══════════════════════════════════════════════╗"
        echo "║          WINDOWS 98 PROGRESS MONITOR        ║"
        echo "╚══════════════════════════════════════════════╝"
        echo ""
        echo "🔍 Monitoring download progress..."
        echo ""
        
        while true; do
            if [ -f "progress.json" ]; then
                progress=$(python3 -c "import json; print(json.load(open('progress.json'))['progress'])" 2>/dev/null || echo "0")
                status=$(python3 -c "import json; print(json.load(open('progress.json'))['status'])" 2>/dev/null || echo "Starting...")
                files=$(python3 -c "import json; print(json.load(open('progress.json'))['downloaded_files'])" 2>/dev/null || echo "0")
                
                # Clear and redraw progress
                printf "\033[2K\r"
                printf "Progress: ["
                for i in {1..50}; do
                    if [ $i -le $((progress / 2)) ]; then
                        printf "█"
                    else
                        printf "░"
                    fi
                done
                printf "] %3d%%\n" $progress
                printf "Status: %s\n" "$status"
                printf "Files: %d\n" $files
                printf "\033[3A"  # Move cursor up 3 lines
            fi
            sleep 2
        done
        EOF
        chmod +x progress_monitor.sh

    - name: Run Windows 98 style download
      run: |
        echo "🚀 Starting Windows 98 Download Manager..."
        echo ""
        python3 win98_downloader.py "${{ github.event.inputs.target_url }}"

    - name: Count and organize downloaded files
      id: file_count
      run: |
        # Count different file types
        videos=$(find qawwali-videos -name '*.mp4' | wc -l)
        thumbnails=$(find qawwali-videos -name '*.jpg' | wc -l)
        metadata=$(find qawwali-videos -name '*.json' | wc -l)
        total=$((videos + thumbnails + metadata))
        
        echo "╔══════════════════════════════════════════════╗"
        echo "║               FILE SUMMARY                   ║"
        echo "╚══════════════════════════════════════════════╝"
        echo ""
        echo "🎥 Videos:      $videos"
        echo "🖼️  Thumbnails:  $thumbnails"
        echo "📋 Metadata:    $metadata"
        echo "📊 Total:       $total"
        echo ""
        
        echo "videos=$videos" >> $GITHUB_OUTPUT
        echo "thumbnails=$thumbnails" >> $GITHUB_OUTPUT
        echo "metadata=$metadata" >> $GITHUB_OUTPUT
        echo "total=$total" >> $GITHUB_OUTPUT

    - name: Create directory structure report
      run: |
        echo "📁 DIRECTORY STRUCTURE:"
        echo "┌────────────────────────────────────────────────┐"
        find qawwali-videos -type f -name "*.mp4" | head -10 | while read file; do
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)
            echo "│ 📄 $filename ($size)"
        done
        echo "└────────────────────────────────────────────────┘"

    - name: Compress with progress display
      run: |
        echo "🗜️  Compressing files..."
        echo "┌─ Compression Progress ─────────────────────────┐"
        tar -czf qawwali-videos-$(date +%Y%m%d-%H%M%S).tar.gz qawwali-videos/ | \
        pv -l -s $(find qawwali-videos -type f | wc -l) > /dev/null
        echo "└────────────────────────────────────────────────┘"
        
        echo "📦 Archive created: $(ls -la *.tar.gz | awk '{print $5, $9}')"

    - name: Upload as artifact with Windows 98 style
      uses: actions/upload-artifact@v4
      with:
        name: windows98-tiktok-downloads
        path: |
          qawwali-videos/
          *.tar.gz
        retention-days: 30
        compression-level: 9

    - name: Create final Windows 98 summary
      if: always()
      run: |
        echo "╔══════════════════════════════════════════════╗" >> $GITHUB_STEP_SUMMARY
        echo "║          WINDOWS 98 DOWNLOAD REPORT          ║" >> $GITHUB_STEP_SUMMARY
        echo "╚══════════════════════════════════════════════╝" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Download Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Profile URL:** ${{ github.event.inputs.target_url }}" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Download Type:** ${{ github.event.inputs.download_type }}" >> $GITHUB_STEP_SUMMARY
        echo "🕒 **Completed:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 File Statistics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎥 **Videos:** ${{ steps.file_count.outputs.videos }}" >> $GITHUB_STEP_SUMMARY
        echo "🖼️ **Thumbnails:** ${{ steps.file_count.outputs.thumbnails }}" >> $GITHUB_STEP_SUMMARY
        echo "📋 **Metadata:** ${{ steps.file_count.outputs.metadata }}" >> $GITHUB_STEP_SUMMARY
        echo "📈 **Total Files:** ${{ steps.file_count.outputs.total }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎨 Windows 98 Features" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ ASCII Art Progress Bars" >> $GITHUB_STEP_SUMMARY
        echo "✅ Real-time Status Updates" >> $GITHUB_STEP_SUMMARY
        echo "✅ File Download Counter" >> $GITHUB_STEP_SUMMARY
        echo "✅ Speed and ETA Display" >> $GITHUB_STEP_SUMMARY
        echo "✅ Retro Terminal Interface" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Status:** COMPLETED SUCCESSFULLY" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "> 💾 Download the **windows98-tiktok-downloads** artifact to get all files" >> $GITHUB_STEP_SUMMARY

    - name: Display completion banner
      if: success()
      run: |
        echo ""
        echo "╔══════════════════════════════════════════════╗"
        echo "║            DOWNLOAD COMPLETE!               ║"
        echo "║                                              ║"
        echo "║    🎉 All videos downloaded successfully!   ║"
        echo "║    📦 Check artifacts for download files    ║"
        echo "║    ⭐ Thank you for using Win98 Downloader  ║"
        echo "╚══════════════════════════════════════════════╝"
        echo ""
        echo "📊 Final Stats:"
        echo "   • Videos: ${{ steps.file_count.outputs.videos }}"
        echo "   • Thumbnails: ${{ steps.file_count.outputs.thumbnails }}"
        echo "   • Total Files: ${{ steps.file_count.outputs.total }}"
        echo "   • Profile: ${{ github.event.inputs.target_url }}"
        echo ""

    - name: Display error banner
      if: failure()
      run: |
        echo ""
        echo "╔══════════════════════════════════════════════╗"
        echo "║               DOWNLOAD FAILED               ║"
        echo "║                                              ║"
        echo "║    ❌ There was an error during download    ║"
        echo "║    🔧 Check the logs for details            ║"
        echo "║    🛠️  Please try again                     ║"
        echo "╚══════════════════════════════════════════════╝"
        echo ""
