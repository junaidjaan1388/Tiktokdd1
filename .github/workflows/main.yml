name: Web Download Interface

on: 
  workflow_dispatch:
    inputs:
      web_port:
        description: 'Web interface port'
        default: '8080'

jobs:
  web-downloader:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python and web server
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip ffmpeg
        pip3 install yt-dlp flask
        
        # Create simple web interface
        cat > web_downloader.py << 'EOF'
        from flask import Flask, request, jsonify, render_template
        import subprocess
        import os
        import json
        import threading
        
        app = Flask(__name__)
        
        @app.route('/')
        def index():
            return '''
            <!DOCTYPE html>
            <html>
            <head>
                <title>GitHub Actions Downloader</title>
                <style>
                    body { font-family: Arial; margin: 40px; }
                    .container { max-width: 800px; margin: 0 auto; }
                    input[type="text"] { width: 70%; padding: 10px; margin: 10px 0; }
                    button { padding: 10px 20px; background: #007acc; color: white; border: none; cursor: pointer; }
                    .progress { width: 100%; background: #f0f0f0; margin: 10px 0; }
                    .progress-bar { height: 20px; background: #007acc; width: 0%; }
                    .log { background: #000; color: #0f0; padding: 10px; height: 300px; overflow-y: scroll; font-family: monospace; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ðŸ”„ GitHub Actions Downloader</h1>
                    <input type="text" id="url" placeholder="Enter TikTok/YouTube URL">
                    <button onclick="startDownload()">Start Download</button>
                    
                    <div class="progress">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                    
                    <div>Status: <span id="status">Ready</span></div>
                    
                    <h3>Download Log:</h3>
                    <div class="log" id="log"></div>
                </div>
                
                <script>
                    function startDownload() {
                        const url = document.getElementById('url').value;
                        fetch('/download', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({url: url})
                        });
                        updateProgress();
                    }
                    
                    function updateProgress() {
                        fetch('/progress')
                            .then(r => r.json())
                            .then(data => {
                                document.getElementById('progressBar').style.width = data.progress + '%';
                                document.getElementById('status').textContent = data.status;
                                document.getElementById('log').innerHTML = data.log;
                                setTimeout(updateProgress, 1000);
                            });
                    }
                </script>
            </body>
            </html>
            '''
        
        download_status = {'progress': 0, 'status': 'Ready', 'log': ''}
        
        @app.route('/download', methods=['POST'])
        def download():
            data = request.json
            url = data.get('url')
            
            def download_thread():
                download_status.update({'progress': 10, 'status': 'Starting...', 'log': ''})
                
                try:
                    cmd = f'yt-dlp -o "downloads/%(title)s.%(ext)s" --print-json "{url}"'
                    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
                    
                    for line in process.stdout:
                        download_status['log'] += line + '<br>'
                        download_status['progress'] = min(90, download_status['progress'] + 5)
                    
                    download_status.update({'progress': 100, 'status': 'Completed!'})
                except Exception as e:
                    download_status.update({'status': f'Error: {e}', 'progress': 0})
            
            threading.Thread(target=download_thread).start()
            return jsonify({'status': 'started'})
        
        @app.route('/progress')
        def progress():
            return jsonify(download_status)
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=8080)
        EOF

    - name: Start web server (if needed)
      run: |
        # Note: GitHub Actions workflows can't directly expose web ports
        # This would need to be deployed separately
        echo "Web interface code is ready!"
        echo "To use the web interface, deploy the Flask app separately."
        echo "Download functionality will work through the workflow."
